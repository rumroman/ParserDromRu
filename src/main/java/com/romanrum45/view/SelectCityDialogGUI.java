/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.romanrum45.view;

import com.romanrum45.controller.SelectionControllerInterface;
import com.romanrum45.model.AdvertOfCarsModelInterface;
import com.romanrum45.observers.LocationObserver;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author Rum
 */
public class SelectCityDialogGUI extends JDialog implements LocationObserver {

    
    private AdvertOfCarsModelInterface model;
    private SelectionControllerInterface controller;
    private ListSelectionModel listSelectionModelRegion;
    private ListSelectionModel listSelectionModelCities;

    /**
     * Creates new form SelectCityDialogGUI
     * @param controller
     * @param model
     */
    public SelectCityDialogGUI(SelectionControllerInterface controller,AdvertOfCarsModelInterface model) {        
        this.controller = controller;
        this.model = model;
        model.registerObserver(SelectCityDialogGUI.this);
        initComponents();    
    }    
        
    @Override
    public void updateRegions(){        
        String [] arrayRegions = model.getArrayRegions();
        jList1.setModel(new DefaultComboBoxModel(arrayRegions));        
        listSelectionModelRegion = jList1.getSelectionModel();
        listSelectionModelRegion.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listSelectionModelRegion.addListSelectionListener((ListSelectionEvent e) -> {
            if (e.getValueIsAdjusting() == false) {                
                int indexRegion = jList1.getSelectedIndex();
                controller.setIndexRegion(indexRegion);                
            }
        });        
    }
    
    @Override
    public void updateCities(){        
        String [] arrayCities = model.getArrayCities();
        jList2.setModel(new DefaultComboBoxModel(arrayCities));
        listSelectionModelCities = jList2.getSelectionModel();
        listSelectionModelCities.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listSelectionModelCities.addListSelectionListener((ListSelectionEvent e) -> {
            if (e.getValueIsAdjusting() == false) {                
                int indexCity = jList2.getSelectedIndex();
                controller.setIndexCity(indexCity);
                removeObserver();
                this.dispose();
            }
        });
    }  
    
    private void removeObserver(){
        model.removeObserver(this);
    }
    
    public void createWindowsListener(){
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
            }
            @Override
            public void windowClosing(WindowEvent e) {
                removeObserver();
            }
            @Override
            public void windowClosed(WindowEvent e) {                
            }
            @Override
            public void windowIconified(WindowEvent e) {
            }
            @Override
            public void windowDeiconified(WindowEvent e) {
            }
            @Override
            public void windowActivated(WindowEvent e) {
            }
            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });
    }
    
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Выбор города");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Подождите..." };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    
}
